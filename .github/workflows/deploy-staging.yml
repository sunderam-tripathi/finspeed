# Production-Grade CI/CD Workflow for Staging
# Deploys infrastructure and applications to the Finspeed staging environment.

name: Deploy Staging

on:
  push:
    branches:
      - develop
  pull_request_target:
    types:
      - opened
      - reopened
      - synchronize
    branches:
      - develop
    paths:
      - 'infra/terraform/**'

# Environment variables available to all jobs
env:
  GCP_PROJECT_ID: finspeed-staging-st
  GCP_REGION: asia-south2
  GAR_LOCATION: asia-south2 # Google Artifact Registry location
  TF_STATE_BUCKET: finspeed-st-tf-state
  API_IMAGE_NAME: api
  FRONTEND_IMAGE_NAME: frontend

# Default permissions are read-only, reducing the attack surface.
permissions:
  contents: read

jobs:
  # This job determines which components have changed.
  changes:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      api: ${{ steps.filter.outputs.api }}
      frontend: ${{ steps.filter.outputs.frontend }}
      infra: ${{ steps.filter.outputs.infra }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect changed paths
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            api:
              - 'api/**'
            frontend:
              - 'frontend/**'
            infra:
              - 'infra/terraform/**'

  # This job runs `terraform plan` on pull requests to `develop`.
  terraform-plan:
    name: Terraform Plan
    needs: changes
    if: needs.changes.outputs.infra == 'true' && github.event_name == 'pull_request_target'
    runs-on: ubuntu-latest
    environment: staging
    permissions:
      contents: read
      id-token: write # For GCP auth
      pull-requests: write # To comment on PR
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.0

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=${{ env.TF_STATE_BUCKET }}"
        working-directory: ./infra/terraform/staging

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        working-directory: ./infra/terraform/staging
        continue-on-error: true

      - name: Post Plan to PR
        uses: actions/github-script@v7
        if: steps.plan.outcome != 'skipped'
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan ðŸ“–\n\n<details><summary>Show Plan</summary>\n\n\`\`\`terraform\n${process.env.PLAN}\n\`\`\`\n\n</details>\n\n*Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

            if ('${{ steps.plan.outcome }}' == 'failure') {
              process.exit(1);
            }

  # This job builds and pushes container images if the source code has changed.
  build-and-push:
    needs: changes
    if: (needs.changes.outputs.api == 'true' || needs.changes.outputs.frontend == 'true') && github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write # Required for authentication to GCP
    outputs:
      image_tag: ${{ steps.image-metadata.outputs.image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

      - name: Generate Image Tag
        id: image-metadata
        run: echo "image_tag=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT

      - name: Build and Push API Image
        if: needs.changes.outputs.api == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./api
          push: true
          tags: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.API_IMAGE_NAME }}:${{ steps.image-metadata.outputs.image_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and Push Frontend Image
        if: needs.changes.outputs.frontend == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ steps.image-metadata.outputs.image_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # This job deploys the Terraform infrastructure if it has changed.
  deploy-infra:
    needs: changes
    if: needs.changes.outputs.infra == 'true' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: staging
    permissions:
      contents: read
      id-token: write # Required for authentication to GCP
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.0

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=${{ env.TF_STATE_BUCKET }}"
        working-directory: ./infra/terraform/staging

      - name: Terraform Plan
        id: plan
        run: terraform plan -out=tfplan
        working-directory: ./infra/terraform/staging

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve tfplan
        working-directory: ./infra/terraform/staging

  # This job deploys the applications to Cloud Run.
  deploy-apps:
    needs: [build-and-push, deploy-infra]
    if: always() && (needs.build-and-push.result == 'success' || needs.deploy-infra.result == 'success')
    runs-on: ubuntu-latest
    environment: staging
    permissions:
      contents: read
      id-token: write # Required for authentication to GCP
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy API to Cloud Run
        if: needs.changes.outputs.api == 'true'
        run: |
          gcloud run deploy finspeed-api-staging \
            --image ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.API_IMAGE_NAME }}:${{ needs.build-and-push.outputs.image_tag }} \
            --region ${{ env.GCP_REGION }} \
            --platform managed \
            --allow-unauthenticated

      - name: Deploy Frontend to Cloud Run
        if: needs.changes.outputs.frontend == 'true'
        run: |
          gcloud run deploy finspeed-frontend-staging \
            --image ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ needs.build-and-push.outputs.image_tag }} \
            --region ${{ env.GCP_REGION }} \
            --platform managed \
            --allow-unauthenticated