name: Deploy to Staging

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install pnpm
      run: npm install -g pnpm

    # API Tests
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install Go dependencies
      run: |
        cd api
        go mod download

    - name: Run Go linting
      run: |
        cd api
        go vet ./...
        go fmt ./...
        # Check if go fmt made any changes
        if [ -n "$(git diff --name-only)" ]; then
          echo "Go code is not formatted. Please run 'go fmt ./...'"
          exit 1
        fi

    - name: Run Go tests
      run: |
        cd api
        go test -v ./...

    - name: Build Go application
      run: |
        cd api
        go build -o bin/server ./cmd/server

    # Frontend Tests
    - name: Install frontend dependencies
      run: |
        cd frontend
        pnpm install

    - name: Run frontend linting
      run: |
        cd frontend
        pnpm run lint || echo "Linting not configured yet"

    - name: Run frontend tests
      run: |
        cd frontend
        pnpm run test || echo "Tests not configured yet"

    - name: Build frontend
      run: |
        cd frontend
        pnpm run build

  deploy-staging:
    needs: lint-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true

    - name: Configure Docker to use gcloud as a credential helper
      run: gcloud auth configure-docker

    - name: Build and push API Docker image
      run: |
        cd api
        docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/finspeed-api-staging:${{ github.sha }} .
        docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/finspeed-api-staging:${{ github.sha }}

    - name: Build and push Frontend Docker image
      run: |
        cd frontend
        docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/finspeed-frontend-staging:${{ github.sha }} .
        docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/finspeed-frontend-staging:${{ github.sha }}

    - name: Deploy to Cloud Run (API)
      run: |
        gcloud run deploy finspeed-api-staging \
          --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/finspeed-api-staging:${{ github.sha }} \
          --platform managed \
          --region us-central1 \
          --allow-unauthenticated \
          --set-env-vars="ENVIRONMENT=staging" \
          --set-env-vars="DATABASE_URL=${{ secrets.STAGING_DATABASE_URL }}"

    - name: Deploy to Cloud Run (Frontend)
      run: |
        gcloud run deploy finspeed-frontend-staging \
          --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/finspeed-frontend-staging:${{ github.sha }} \
          --platform managed \
          --region us-central1 \
          --allow-unauthenticated \
          --set-env-vars="ENVIRONMENT=staging" \
          --set-env-vars="API_URL=${{ secrets.STAGING_API_URL }}"

    - name: Run smoke tests
      run: |
        echo "Running smoke tests against staging environment..."
        # Add smoke test commands here
        curl -f ${{ secrets.STAGING_API_URL }}/healthz || exit 1
        echo "Staging deployment successful!"