# Production-Grade CI/CD Workflow for Staging
# Deploys infrastructure and applications to the Finspeed staging environment.

name: Deploy Staging

on:
  push:
    branches:
      - develop
  pull_request_target:
    types:
      - opened
      - reopened
      - synchronize
    branches:
      - develop

# Environment variables available to all jobs
env:
  GCP_PROJECT_ID: finspeed-staging-st
  GCP_REGION: asia-south2
  GAR_LOCATION: asia-south2 # Google Artifact Registry location
  TF_STATE_BUCKET: finspeed-st-tf-state
  API_IMAGE_NAME: api
  FRONTEND_IMAGE_NAME: frontend
  MIGRATE_IMAGE_NAME: migrate

# Default permissions are read-only, reducing the attack surface.
permissions:
  contents: read

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      api: ${{ steps.filter.outputs.api }}
      frontend: ${{ steps.filter.outputs.frontend }}
      infra: ${{ steps.filter.outputs.infra }}
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Detect changed paths
        uses: dorny/paths-filter@de90cc6fb38fc0963ad72b2105118b43ade28821 # v3.0.2
        id: filter
        with:
          filters: |
            api:
              - 'api/**'
              - 'docker/api.Dockerfile'
              - 'docker/migrate.Dockerfile'
            frontend:
              - 'frontend/**'
              - 'docker/frontend.Dockerfile'
            infra:
              - 'infra/terraform/**'
              - '.github/workflows/deploy-staging.yml'

  terraform-plan:
    name: Terraform Plan
    if: needs.changes.outputs.infra == 'true' && github.event_name == 'pull_request_target'
    needs: changes
    runs-on: ubuntu-latest
    environment: staging
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    steps:
      - name: Checkout PR code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@55bd3a7c6e2ae7cf1877fd140299cf841c171a2d # v2.1.2
        with:
                workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER_STAGING }}
                service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_STAGING }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@651475d481a335c04de5433535c74baa3568c5fd # v3.1.1

      - name: Terraform Init
        run: terraform init -backend-config="bucket=${{ env.TF_STATE_BUCKET }}"
        working-directory: ./infra/terraform/staging

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        working-directory: ./infra/terraform/staging
        continue-on-error: true

      - name: Post Plan to PR
        uses: actions/github-script@60a0d83039c74a0a96485d6145c897c38f6ae70e # v7.0.1
        if: steps.plan.outcome != 'skipped'
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan ðŸ“–\n\n<details><summary>Show Plan</summary>\n\n\`\`\`terraform\n${process.env.PLAN}\n\`\`\`\n\n</details>`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
            if ('${{ steps.plan.outcome }}' == 'failure') process.exit(1);

  deploy-infra:
    name: Deploy Infrastructure
    if: github.event_name == 'push'
    needs: changes
    runs-on: ubuntu-latest
    environment: staging
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@55bd3a7c6e2ae7cf1877fd140299cf841c171a2d # v2.1.2
        with:
                workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER_STAGING }}
                service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_STAGING }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@651475d481a335c04de5433535c74baa3568c5fd # v3.1.1

      - name: Cache Terraform plugins
        uses: actions/cache@ab5e4d94be16e85ffd35b7de6c34cf0b2327241e # v4.0.2
        with:
          path: ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}

      - name: Terraform Init
        run: terraform init -backend-config="bucket=${{ env.TF_STATE_BUCKET }}"
        working-directory: ./infra/terraform/staging

      - name: Terraform Apply Infra
        run: terraform apply -auto-approve -var='api_image=placeholder' -var='frontend_image=placeholder' -var='migrate_image=placeholder'
        working-directory: ./infra/terraform/staging

  build-and-push:
    name: Build and Push Images
    if: github.event_name == 'push' && (needs.changes.outputs.api == 'true' || needs.changes.outputs.frontend == 'true' || needs.changes.outputs.infra == 'true')
    needs: [changes, deploy-infra]
    runs-on: ubuntu-latest
    environment: staging
    permissions:
      contents: read
      id-token: write
      packages: write # Required for pushing to GAR
    outputs:
      image_tag: ${{ steps.image-metadata.outputs.image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Authenticate to Google Cloud
        id: auth # Give this step an ID to reference its outputs
        uses: google-github-actions/auth@55bd3a7c6e2ae7cf1877fd140299cf841c171a2d # v2.1.2
        with:
                workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER_STAGING }}
                service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_STAGING }}

      - name: Log in to Google Artifact Registry
        uses: docker/login-action@0d4c9c5ea7693da7b068278f7b52bda2a190a446 # v3.2.0
        with:
          registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@d70bba72b6f3cb22344832f04baa164b94a20454 # v3.3.0

      - name: Generate Image Tag
        id: image-metadata
        run: echo "image_tag=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT

      - name: Build and Push API Image
        if: needs.changes.outputs.api == 'true' || needs.changes.outputs.infra == 'true'
        uses: docker/build-push-action@2cdde995de11925a030ce8070c3d77a52ffcf1c0 # v5.3.0
        with:
          context: ./api
          file: ./docker/api.Dockerfile
          push: true
          tags: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.API_IMAGE_NAME }}:${{ steps.image-metadata.outputs.image_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and Push Frontend Image
        if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.infra == 'true'
        uses: docker/build-push-action@2cdde995de11925a030ce8070c3d77a52ffcf1c0 # v5.3.0
        with:
          context: ./frontend
          file: ./docker/frontend.Dockerfile
          push: true
          tags: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ steps.image-metadata.outputs.image_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and Push Migrate Image
        if: needs.changes.outputs.api == 'true' || needs.changes.outputs.infra == 'true'
        uses: docker/build-push-action@2cdde995de11925a030ce8070c3d77a52ffcf1c0 # v5.3.0
        with:
          context: ./api
          file: ./docker/migrate.Dockerfile
          push: true
          tags: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.MIGRATE_IMAGE_NAME }}:${{ steps.image-metadata.outputs.image_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-services:
    name: Deploy Services
    if: github.event_name == 'push' && needs.build-and-push.outputs.image_tag != ''
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: staging
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@55bd3a7c6e2ae7cf1877fd140299cf841c171a2d # v2.1.2
        with:
                workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER_STAGING }}
                service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_STAGING }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@651475d481a335c04de5433535c74baa3568c5fd # v3.1.1

      - name: Cache Terraform plugins
        uses: actions/cache@ab5e4d94be16e85ffd35b7de6c34cf0b2327241e # v4.0.2
        with:
          path: ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}

      - name: Terraform Init
        run: terraform init -backend-config="bucket=${{ env.TF_STATE_BUCKET }}"
        working-directory: ./infra/terraform/staging

      - name: Terraform Apply Service Images
        run: |
          TF_VARS="-var='api_image=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.API_IMAGE_NAME }}:${{ needs.build-and-push.outputs.image_tag }}' -var='frontend_image=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ needs.build-and-push.outputs.image_tag }}' -var='migrate_image=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.MIGRATE_IMAGE_NAME }}:${{ needs.build-and-push.outputs.image_tag }}'"
          terraform apply -auto-approve $TF_VARS
        working-directory: ./infra/terraform/staging