# Production-Grade CI/CD Workflow for Staging
# Deploys infrastructure and applications to the Finspeed staging environment.

name: Deploy Staging

on:
  push:
    branches:
      - develop
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
    branches:
      - develop
  pull_request_target:
    types:
      - opened
      - reopened
      - synchronize
    branches:
      - develop
  workflow_dispatch:
    inputs:
      force_migrate:
        description: 'Run migration job even if no infra/api changes'
        type: boolean
        required: false
        default: true

# Environment variables available to all jobs
env:
  GCP_PROJECT_ID: finspeed-staging-st
  GCP_REGION: asia-south2
  GAR_LOCATION: asia-south2 # Google Artifact Registry location
  TF_STATE_BUCKET: finspeed-st-tf-state
  API_IMAGE_NAME: finspeed-api-staging
  FRONTEND_IMAGE_NAME: finspeed-frontend-staging
  ADMIN_IMAGE_NAME: finspeed-admin-staging
  MIGRATE_IMAGE_NAME: finspeed-migrate-staging

# Default permissions are read-only, reducing the attack surface.
permissions:
  contents: read

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      api: ${{ steps.filter.outputs.api }}
      frontend: ${{ steps.filter.outputs.frontend }}
      admin: ${{ steps.filter.outputs.admin }}
      infra: ${{ steps.filter.outputs.infra }}
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0

      - name: Detect changed paths
        uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3.0.2
        id: filter
        with:
          filters: |
            api:
              - 'api/**'
              - 'docker/api.Dockerfile'
              - 'docker/api.prod.Dockerfile'
              - 'docker/migrate.Dockerfile'
              - 'db/migrations/**'
            frontend:
              - 'frontend/**'
              - 'docker/frontend.Dockerfile'
            admin:
              - 'admin-app/**'
              - 'docker/admin.Dockerfile'
            infra:
              - 'infra/terraform/**'
              - '.github/workflows/deploy-staging.yml'

  terraform-plan:
    name: Terraform Plan
    if: needs.changes.outputs.infra == 'true' && (github.event_name == 'pull_request' || github.event_name == 'pull_request_target')
    needs: changes
    runs-on: ubuntu-latest
    environment: staging
    timeout-minutes: 25
    concurrency:
      group: plan-staging-pr-${{ github.event.pull_request.number }}
      cancel-in-progress: true
    permissions:
      contents: read
      id-token: write
      pull-requests: write
      issues: write
    steps:
      - name: Checkout PR code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0
          persist-credentials: false
          clean: true

      - name: Determine if PR is from a fork
        id: fork
        shell: bash
        run: |
          if [ "${{ github.event.pull_request.head.repo.full_name }}" != "${{ github.repository }}" ]; then
            echo "Detected forked PR: ${{ github.event.pull_request.head.repo.full_name }} -> ${{ github.repository }}"
            echo "IS_FORK=true" >> $GITHUB_ENV
            echo "is_fork=true" >> $GITHUB_OUTPUT
          else
            echo "Detected same-repo PR"
            echo "IS_FORK=false" >> $GITHUB_ENV
            echo "is_fork=false" >> $GITHUB_OUTPUT
          fi

      - name: Prepare plan log files (always available)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p infra/terraform/staging
          : > infra/terraform/staging/tfplan.txt
          : > infra/terraform/staging/tf-plan-debug.log

      - name: Check GCP auth inputs present
        id: secrets_present
        shell: bash
        run: |
          if [ -n "${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER_STAGING }}" ] && [ -n "${{ secrets.GCP_SERVICE_ACCOUNT_STAGING }}" ]; then
            echo "ok=true" >> "$GITHUB_OUTPUT"
          else
            echo "ok=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Authenticate to Google Cloud
        if: steps.fork.outputs.is_fork == 'false' && steps.secrets_present.outputs.ok == 'true' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
        uses: google-github-actions/auth@b7593ed2efd1c1617e1b0254da33b86225adb2a5 # v2.1.12 # v2.1.2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER_STAGING }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_STAGING }}

      - name: Set up Cloud SDK
        if: steps.fork.outputs.is_fork == 'false' && steps.secrets_present.outputs.ok == 'true' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
        uses: google-github-actions/setup-gcloud@v2

      - name: Terraform Format Check
        if: steps.fork.outputs.is_fork == 'false' && steps.secrets_present.outputs.ok == 'true' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
        shell: bash
        run: |
          set -euo pipefail
          cd infra/terraform/staging
          terraform fmt -check -recursive

      - name: Terraform Validate
        if: steps.fork.outputs.is_fork == 'false' && steps.secrets_present.outputs.ok == 'true' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
        shell: bash
        run: |
          set -euo pipefail
          cd infra/terraform/staging
          terraform validate

      - name: Terraform Apply Infra
        if: steps.fork.outputs.is_fork == 'false' && steps.secrets_present.outputs.ok == 'true' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
        shell: bash
        run: |
          set -euo pipefail
          cd infra/terraform/staging
          terraform apply -lock-timeout=5m -auto-approve -input=false
        env:
          TF_LOG: INFO
          TF_VAR_cors_allowed_origins: '["https://staging.finspeed.online","https://admin.staging.finspeed.online"]'

      - name: Clean up stale Terraform lock (best-effort)
        if: steps.fork.outputs.is_fork == 'false' && steps.secrets_present.outputs.ok == 'true' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
        shell: bash
        run: |
          set -euo pipefail
          OBJECT="gs://${{ env.TF_STATE_BUCKET }}/staging/default.tflock"
          if gsutil -q stat "$OBJECT"; then
            MTIME=$(gsutil stat "$OBJECT" | awk -F': +' '/Update time:/ {print $2}' | head -n1)
            if [ -n "${MTIME:-}" ]; then
              LOCK_TS=$(date -d "$MTIME" +%s || echo 0)
              NOW=$(date +%s)
              AGE=$((NOW - LOCK_TS))
            else
              AGE=999999
            fi
            if [ "$AGE" -gt 900 ]; then
              echo "Deleting stale Terraform lock ($AGE seconds old) at $OBJECT"
              gsutil rm "$OBJECT" || true
            else
              echo "Terraform lock exists but is recent ($AGE seconds); not deleting."
            fi
          else
            echo "No Terraform lock file present."
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2 # v3.1.1
        with:
          terraform_wrapper: false

      
      - name: Terraform Init (remote backend)
        if: steps.fork.outputs.is_fork == 'false' && steps.secrets_present.outputs.ok == 'true' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
        run: terraform init -reconfigure -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" -backend-config="prefix=staging-ci"
        working-directory: ./infra/terraform/staging

      - name: Terraform Init (PR - Local Backend)
        if: github.event_name == 'pull_request'
        run: |
          # Temporarily rename backend.tf to disable remote backend for PR validation
          mv backend.tf backend.tf.disabled || true
          terraform init -reconfigure
        working-directory: ./infra/terraform/staging

      - name: Terraform Init (local backend fallback when secrets missing)
        if: steps.fork.outputs.is_fork == 'false' && steps.secrets_present.outputs.ok != 'true'
        run: |
          # Temporarily rename backend.tf to disable remote backend
          mv backend.tf backend.tf.disabled || true
          terraform init -reconfigure
        working-directory: ./infra/terraform/staging

      - name: Seed placeholder TF_VARs (unauthenticated)
        if: steps.secrets_present.outputs.ok != 'true' || steps.fork.outputs.is_fork == 'true'
        shell: bash
        run: |
          set -euo pipefail
          echo "TF_VAR_api_image=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.API_IMAGE_NAME }}/${{ env.API_IMAGE_NAME }}:latest" >> $GITHUB_ENV
          echo "TF_VAR_frontend_image=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.FRONTEND_IMAGE_NAME }}/${{ env.FRONTEND_IMAGE_NAME }}:latest" >> $GITHUB_ENV
          echo "TF_VAR_admin_image=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ADMIN_IMAGE_NAME }}/${{ env.ADMIN_IMAGE_NAME }}:latest" >> $GITHUB_ENV
          echo "TF_VAR_migrate_image=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.MIGRATE_IMAGE_NAME }}/${{ env.MIGRATE_IMAGE_NAME }}:latest" >> $GITHUB_ENV
        working-directory: ./infra/terraform/staging

      - name: Seed TF_VAR image variables (best-effort)
        if: steps.fork.outputs.is_fork == 'false' && steps.secrets_present.outputs.ok == 'true' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
        shell: bash
        run: |
          set -euo pipefail
          # Seed API image variable from existing Cloud Run service if present; fallback to placeholder
          API_IMG=$(gcloud run services describe finspeed-api-staging \
            --region=${{ env.GCP_REGION }} \
            --project=${{ env.GCP_PROJECT_ID }} \
            --format="value(spec.template.spec.containers[0].image)" 2>/dev/null || true)
          if [[ -n "${API_IMG:-}" ]]; then
            echo "Using existing API image: $API_IMG"
            echo "TF_VAR_api_image=$API_IMG" >> $GITHUB_ENV
          else
            echo "No existing API service found or image empty; using GAR latest fallback."
            echo "TF_VAR_api_image=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.API_IMAGE_NAME }}/${{ env.API_IMAGE_NAME }}:latest" >> $GITHUB_ENV
          fi

          # Seed Frontend image variable from existing Cloud Run service if present; fallback to placeholder
          FE_IMG=$(gcloud run services describe finspeed-frontend-staging \
            --region=${{ env.GCP_REGION }} \
            --project=${{ env.GCP_PROJECT_ID }} \
            --format="value(spec.template.spec.containers[0].image)" 2>/dev/null || true)
          if [[ -n "${FE_IMG:-}" ]]; then
            echo "Using existing Frontend image: $FE_IMG"
            echo "TF_VAR_frontend_image=$FE_IMG" >> $GITHUB_ENV
          else
            echo "No existing Frontend service found or image empty; using GAR latest fallback."
            echo "TF_VAR_frontend_image=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.FRONTEND_IMAGE_NAME }}/${{ env.FRONTEND_IMAGE_NAME }}:latest" >> $GITHUB_ENV
          fi

          # Seed migrate job image from existing Cloud Run Job if present; try multiple paths; fallback to placeholder
          MIG_IMG=$(gcloud run jobs describe finspeed-migrate-staging \
            --region=${{ env.GCP_REGION }} \
            --project=${{ env.GCP_PROJECT_ID }} \
            --format="value(spec.template.template.spec.containers[0].image)" 2>/dev/null || true)
          if [[ -z "${MIG_IMG:-}" ]]; then
            MIG_IMG=$(gcloud run jobs describe finspeed-migrate-staging \
              --region=${{ env.GCP_REGION }} \
              --project=${{ env.GCP_PROJECT_ID }} \
              --format="value(spec.template.spec.containers[0].image)" 2>/dev/null || true)
          fi
          if [[ -n "${MIG_IMG:-}" ]]; then
            echo "Using existing migrate image: $MIG_IMG"
            echo "TF_VAR_migrate_image=$MIG_IMG" >> $GITHUB_ENV
          else
            echo "No existing migrate job found or image empty; using GAR latest fallback."
            echo "TF_VAR_migrate_image=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.MIGRATE_IMAGE_NAME }}/${{ env.MIGRATE_IMAGE_NAME }}:latest" >> $GITHUB_ENV
          fi
        working-directory: ./infra/terraform/staging

      - name: Terraform Plan
        id: plan
        env:
          TF_LOG: DEBUG
          TF_LOG_PATH: tf-plan-debug.log
          TF_INPUT: "0"
          TF_IN_AUTOMATION: "1"
        run: |
          set -euo pipefail
          # Show Terraform and providers info to aid debugging
          terraform version
          terraform providers
          # Run plan and capture output but do not abort the step prematurely
          set +e
          terraform plan -no-color -lock=false -input=false -refresh=false -parallelism=10 | tee tfplan.txt
          PLAN_EXIT=$?
          set -e
          # Restore backend.tf if it was disabled for PR validation
          mv backend.tf.disabled backend.tf || true
          # Expose plan text and exit code as step outputs for later steps
          {
            echo "plan<<EOF"
            cat tfplan.txt
            echo "EOF"
            echo "exitcode=$PLAN_EXIT"
          } >> "$GITHUB_OUTPUT"
        working-directory: ./infra/terraform/staging
        continue-on-error: true

      - name: Post Plan to PR
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1 # v7.0.1
        if: steps.plan.outcome != 'skipped'
        env:
          PLAN: "${{ steps.plan.outputs.plan }}"
          EXITCODE: "${{ steps.plan.outputs.exitcode }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const plan = process.env.PLAN && process.env.PLAN.trim().length ? process.env.PLAN : '(no plan output; see tf-plan-debug artifact)';
            const output = `#### Terraform Plan 📖\n\n<details><summary>Show Plan</summary>\n\n\`\`\`terraform\n${plan}\n\`\`\`\n\n</details>`;
            const issue_number = context.payload.pull_request?.number ?? context.issue.number;
            await github.rest.issues.createComment({
              issue_number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
            if (process.env.EXITCODE && process.env.EXITCODE !== '0') process.exit(1);

      - name: Upload Terraform plan logs
        if: ${{ always() && !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: tf-plan-debug
          path: |
            infra/terraform/staging/tfplan.txt
            infra/terraform/staging/tf-plan-debug.log
          if-no-files-found: ignore

  deploy-infra:
    name: Deploy Infrastructure
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    needs: changes
    runs-on: ubuntu-latest
    environment: staging
    concurrency:
      group: deploy-staging
      cancel-in-progress: false
    permissions:
      contents: read
      id-token: write
    env:
      TF_VAR_cors_allowed_origins: '["https://staging.finspeed.online","https://admin.staging.finspeed.online"]'
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@b7593ed2efd1c1617e1b0254da33b86225adb2a5 # v2.1.12 # v2.1.2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER_STAGING }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_STAGING }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure gcloud (non-interactive)
        run: |
          gcloud config set core/disable_prompts true
          gcloud config set functions/region ${{ env.GCP_REGION }}
          gcloud config set project ${{ env.GCP_PROJECT_ID }}

      - name: Pre-enable required GCP APIs (idempotent)
        run: |
          set -euo pipefail
          gcloud services enable \
            cloudfunctions.googleapis.com \
            cloudbuild.googleapis.com \
            run.googleapis.com \
            artifactregistry.googleapis.com \
            eventarc.googleapis.com \
            secretmanager.googleapis.com \
            compute.googleapis.com \
            iam.googleapis.com \
            cloudresourcemanager.googleapis.com \
            sts.googleapis.com \
            vpcaccess.googleapis.com \
            storage.googleapis.com \
            sqladmin.googleapis.com \
            monitoring.googleapis.com \
            servicenetworking.googleapis.com \
            --project="${{ env.GCP_PROJECT_ID }}" || true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2 # v3.1.1
        with:
          terraform_wrapper: false

      - name: Cache Terraform plugins
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4 # v4.0.2
        with:
          path: ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}

      - name: Clean up stale Terraform lock (best-effort)
        shell: bash
        run: |
          set -euo pipefail
          OBJECT="gs://${{ env.TF_STATE_BUCKET }}/staging/default.tflock"
          if gsutil -q stat "$OBJECT"; then
            MTIME=$(gsutil stat "$OBJECT" | awk -F': +' '/Update time:/ {print $2}' | head -n1)
            if [ -n "${MTIME:-}" ]; then
              LOCK_TS=$(date -d "$MTIME" +%s || echo 0)
              NOW=$(date +%s)
              AGE=$((NOW - LOCK_TS))
            else
              AGE=999999
            fi
            if [ "$AGE" -gt 900 ]; then
              echo "Deleting stale Terraform lock ($AGE seconds old) at $OBJECT"
              gsutil rm "$OBJECT" || true
            else
              echo "Terraform lock exists but is recent ($AGE seconds); not deleting."
            fi
          else
            echo "No Terraform lock file present."
          fi

      - name: Terraform Init
        run: terraform init -reconfigure -backend-config="bucket=${{ env.TF_STATE_BUCKET }}"
        working-directory: ./infra/terraform/staging

      - name: Reconcile Cloud Function state (import if exists)
        shell: bash
        run: |
          set -euo pipefail
          cd infra/terraform/staging
          RESOURCE='module.finspeed_infra.google_cloudfunctions2_function.api_gateway[0]'
          CF_NAME="finspeed-api-gateway-staging"
          CF_ID="projects/${{ env.GCP_PROJECT_ID }}/locations/${{ env.GCP_REGION }}/functions/${CF_NAME}"
          
          # If already in state, skip
          if terraform state show "$RESOURCE" >/dev/null 2>&1; then
            echo "Cloud Function already in Terraform state; skipping import"
          else
            echo "Checking if Cloud Function exists in GCP to import..."
            # Use gcloud with explicit timeout and error handling
            if timeout 120s gcloud functions describe "$CF_NAME" \
              --region="${{ env.GCP_REGION }}" \
              --project="${{ env.GCP_PROJECT_ID }}" \
              --gen2 \
              --format="value(name)" \
              --quiet 2>/dev/null | grep -q "$CF_NAME"; then
              echo "Found existing Cloud Function '$CF_NAME', importing into Terraform state..."
              if terraform import "$RESOURCE" "$CF_ID"; then
                echo "Successfully imported Cloud Function"
              else
                echo "Import failed, but continuing (may be transient)"
              fi
            else
              echo "Cloud Function '$CF_NAME' not found in GCP; will create new"
            fi
          fi

      - name: Seed TF_VAR image variables (best-effort)
        shell: bash
        run: |
          set -euo pipefail
          # Seed API image variable from existing Cloud Run service if present; fallback to placeholder
          API_IMG=$(gcloud run services describe finspeed-api-staging \
            --region=${{ env.GCP_REGION }} \
            --project=${{ env.GCP_PROJECT_ID }} \
            --format="value(spec.template.spec.containers[0].image)" 2>/dev/null || true)
          if [[ -n "${API_IMG:-}" ]]; then
            echo "Using existing API image: $API_IMG"
            echo "TF_VAR_api_image=$API_IMG" >> $GITHUB_ENV
          else
            echo "No existing API service found or image empty; using GAR latest fallback."
            echo "TF_VAR_api_image=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.API_IMAGE_NAME }}/${{ env.API_IMAGE_NAME }}:latest" >> $GITHUB_ENV
          fi

          # Seed migrate job image from existing Cloud Run Job if present; try multiple paths; fallback to placeholder
          MIG_IMG=$(gcloud run jobs describe finspeed-migrate-staging \
            --region=${{ env.GCP_REGION }} \
            --project=${{ env.GCP_PROJECT_ID }} \
            --format="value(spec.template.template.spec.containers[0].image)" 2>/dev/null || true)
          if [[ -z "${MIG_IMG:-}" ]]; then
            MIG_IMG=$(gcloud run jobs describe finspeed-migrate-staging \
              --region=${{ env.GCP_REGION }} \
              --project=${{ env.GCP_PROJECT_ID }} \
              --format="value(spec.template.spec.containers[0].image)" 2>/dev/null || true)
          fi
          if [[ -n "${MIG_IMG:-}" ]]; then
            echo "Using existing migrate image: $MIG_IMG"
            echo "TF_VAR_migrate_image=$MIG_IMG" >> $GITHUB_ENV
          else
            echo "No existing migrate job found or image empty; using GAR latest fallback."
            echo "TF_VAR_migrate_image=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.MIGRATE_IMAGE_NAME }}/${{ env.MIGRATE_IMAGE_NAME }}:latest" >> $GITHUB_ENV
          fi
        working-directory: ./infra/terraform/staging

      - name: Check bootstrap SA secret present
        id: bootstrap_present
        shell: bash
        run: |
          if [ -n "${{ secrets.GCP_BOOTSTRAP_SERVICE_ACCOUNT_STAGING }}" ]; then
            echo "ok=true" >> "$GITHUB_OUTPUT"
          else
            echo "ok=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Authenticate to Google Cloud (bootstrap SA, optional)
        if: ${{ steps.bootstrap_present.outputs.ok == 'true' }}
        uses: google-github-actions/auth@b7593ed2efd1c1617e1b0254da33b86225adb2a5 # v2.1.12
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER_STAGING }}
          service_account: ${{ secrets.GCP_BOOTSTRAP_SERVICE_ACCOUNT_STAGING }}

      - name: "Bootstrap IAM: ensure projectIamAdmin on GH Actions SA"
        run: |
          terraform apply -lock-timeout=5m -input=false -refresh=false -auto-approve \
            -target='module.finspeed_infra.google_project_iam_member.github_actions_permissions["roles/resourcemanager.projectIamAdmin"]' \
            -target='module.finspeed_infra.google_project_iam_member.github_actions_permissions["roles/iam.workloadIdentityPoolAdmin"]'
          
          # Force replacement of NEG to switch from Cloud Run to Cloud Functions
          terraform apply -lock-timeout=5m -input=false -auto-approve \
            -replace='module.finspeed_infra.google_compute_region_network_endpoint_group.api_gateway_neg'
        working-directory: ./infra/terraform/staging

      - name: Authenticate to Google Cloud (switch to GH Actions SA)
        if: ${{ steps.bootstrap_present.outputs.ok == 'true' }}
        uses: google-github-actions/auth@b7593ed2efd1c1617e1b0254da33b86225adb2a5 # v2.1.12
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER_STAGING }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_STAGING }}

      - name: Wait for IAM propagation (WIF admin)
        if: ${{ steps.bootstrap_present.outputs.ok == 'true' }}
        shell: bash
        run: |
          set -euo pipefail
          echo "Waiting 60s for IAM role changes to propagate..."
          sleep 60

      - name: Best-effort import existing URL map (avoid name conflict)
        shell: bash
        env:
          URL_MAP_NAME: finspeed-lb-url-map-staging
        run: |
          set -euo pipefail
          cd infra/terraform/staging
          # Only attempt import if resource is in config (count=1) and not already in state
          if terraform state show 'module.finspeed_infra.google_compute_url_map.url_map[0]' >/dev/null 2>&1; then
            echo "URL map already in TF state; skipping import"
            exit 0
          fi
          echo "Checking if URL map ${URL_MAP_NAME} exists in project ${GCP_PROJECT_ID}..."
          if gcloud compute url-maps describe "${URL_MAP_NAME}" --global --project "${GCP_PROJECT_ID}" >/dev/null 2>&1; then
            echo "Importing existing URL map into Terraform state"
            terraform import \
              'module.finspeed_infra.google_compute_url_map.url_map[0]' \
              "projects/${GCP_PROJECT_ID}/global/urlMaps/${URL_MAP_NAME}" || true
          else
            echo "URL map ${URL_MAP_NAME} not found; no import needed"
          fi

      - name: "Untaint CF resource (allow update instead of replacement)"
        shell: bash
        run: |
          set -euo pipefail
          cd infra/terraform/staging
          RESOURCE='module.finspeed_infra.google_cloudfunctions2_function.api_gateway[0]'
          
          # Untaint the CF resource if it's tainted
          if terraform state show "$RESOURCE" >/dev/null 2>&1; then
            echo "Untainting CF resource to allow update instead of replacement..."
            terraform untaint "$RESOURCE" || echo "Untaint failed or resource not tainted"
          else
            echo "CF resource not in state; no untaint needed"
          fi

      - name: "Fallback: delete existing CF if import failed (409 prevention)"
        shell: bash
        run: |
          set -euo pipefail
          cd infra/terraform/staging
          RESOURCE='module.finspeed_infra.google_cloudfunctions2_function.api_gateway[0]'
          CF_NAME="finspeed-api-gateway-staging"
          
          # Only delete if resource is NOT in Terraform state but exists in GCP
          if ! terraform state show "$RESOURCE" >/dev/null 2>&1; then
            echo "Checking if CF exists in GCP (fallback for failed import)..."
            if gcloud functions describe "$CF_NAME" \
              --region="${{ env.GCP_REGION }}" \
              --project="${{ env.GCP_PROJECT_ID }}" \
              --gen2 \
              --quiet >/dev/null 2>&1; then
              echo "WARNING: CF exists in GCP but not in TF state. Deleting to prevent 409..."
              gcloud functions delete "$CF_NAME" \
                --region="${{ env.GCP_REGION }}" \
                --project="${{ env.GCP_PROJECT_ID }}" \
                --gen2 \
                --quiet || echo "Delete failed, continuing anyway"
              echo "Waiting 30s for deletion to propagate..."
              sleep 30
            else
              echo "CF not found in GCP; no cleanup needed"
            fi
          else
            echo "CF already in TF state; no cleanup needed"
          fi

      - name: Pre-apply required APIs (idempotent)
        run: |
          terraform apply -lock-timeout=5m -input=false -refresh=false -auto-approve \
            -target='module.finspeed_infra.google_project_service.required_apis'
        working-directory: ./infra/terraform/staging

      - name: Pre-apply IAM for Cloud Build (CF builds)
        run: |
          terraform apply -lock-timeout=5m -input=false -refresh=false -auto-approve \
            -target='module.finspeed_infra.google_project_iam_member.cloudbuild_sa_permissions["roles/cloudfunctions.developer"]' \
            -target='module.finspeed_infra.google_project_iam_member.cloudbuild_sa_permissions["roles/storage.admin"]' \
            -target='module.finspeed_infra.google_project_iam_member.cloudbuild_sa_permissions["roles/artifactregistry.writer"]' \
            -target='module.finspeed_infra.google_project_iam_member.cloudbuild_sa_permissions["roles/cloudbuild.builds.builder"]' \
            -target='module.finspeed_infra.google_project_iam_member.cloudbuild_sa_permissions["roles/source.reader"]' \
            -target='module.finspeed_infra.google_project_iam_member.cloudbuild_sa_permissions["roles/logging.logWriter"]' \
            -target='module.finspeed_infra.google_project_iam_member.cloudbuild_sa_permissions["roles/run.admin"]' \
            -target='module.finspeed_infra.google_project_iam_member.cloudbuild_sa_permissions["roles/iam.serviceAccountUser"]' \
            -target='module.finspeed_infra.google_project_iam_member.cloudbuild_sa_permissions["roles/storage.objectViewer"]'
        working-directory: ./infra/terraform/staging

      - name: Wait for IAM propagation (CF builds)
        shell: bash
        run: |
          set -euo pipefail
          echo "Waiting 120s for IAM role propagation before creating CF"
          sleep 120

      - name: Terraform Apply Infra
        run: terraform apply -lock-timeout=5m -auto-approve -input=false
        working-directory: ./infra/terraform/staging
        env:
          TF_VAR_cors_allowed_origins: '["https://staging.finspeed.online","https://admin.staging.finspeed.online"]'

  build-and-push:
    name: Build and Push Images
    if: github.event_name == 'push' && (needs.changes.outputs.api == 'true' || needs.changes.outputs.frontend == 'true' || needs.changes.outputs.admin == 'true' || needs.changes.outputs.infra == 'true')
    needs: [changes, deploy-infra]
    runs-on: ubuntu-latest
    environment: staging
    permissions:
      contents: read
      id-token: write
      packages: write # Required for pushing to GAR
    outputs:
      image_tag: ${{ steps.image-metadata.outputs.image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@b7593ed2efd1c1617e1b0254da33b86225adb2a5 # v2.1.2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER_STAGING }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_STAGING }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.3.0

      - name: Generate Image Tag
        id: image-metadata
        run: echo "image_tag=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT

      - name: Prepare API Dockerfile in context root
        if: needs.changes.outputs.api == 'true' || needs.changes.outputs.infra == 'true'
        run: |
          set -euo pipefail
          if [ ! -f docker/api.prod.Dockerfile ]; then
            echo "ERROR: docker/api.prod.Dockerfile not found in workspace." >&2
            echo "Workspace listing:" >&2
            ls -la . >&2 || true
            echo "Docker dir listing:" >&2
            ls -la docker >&2 || true
            exit 1
          fi
          cp docker/api.prod.Dockerfile ./api.prod.Dockerfile
        working-directory: ${{ github.workspace }}

      - name: Build and Push API Image
        if: needs.changes.outputs.api == 'true' || needs.changes.outputs.infra == 'true'
        uses: docker/build-push-action@2cdde995de11925a030ce8070c3d77a52ffcf1c0 # v5.3.0
        with:
          context: ${{ github.workspace }}
          file: ./api.prod.Dockerfile
          push: true
          tags: |
            ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.API_IMAGE_NAME }}/${{ env.API_IMAGE_NAME }}:${{ steps.image-metadata.outputs.image_tag }}
            ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.API_IMAGE_NAME }}/${{ env.API_IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max


      - name: Build and Push Frontend Image
        if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.infra == 'true'
        uses: docker/build-push-action@2cdde995de11925a030ce8070c3d77a52ffcf1c0 # v5.3.0
        with:
          context: ${{ github.workspace }}
          file: ${{ github.workspace }}/docker/frontend.Dockerfile
          target: prod  # Use the production build stage
          build-args: |
            NEXT_PUBLIC_ENVIRONMENT=staging
            NEXT_PUBLIC_ENABLE_M3=1
          push: true
          tags: |
            ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.FRONTEND_IMAGE_NAME }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ steps.image-metadata.outputs.image_tag }}
            ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.FRONTEND_IMAGE_NAME }}/${{ env.FRONTEND_IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and Push Admin Image
        if: needs.changes.outputs.admin == 'true' || needs.changes.outputs.infra == 'true'
        uses: docker/build-push-action@2cdde995de11925a030ce8070c3d77a52ffcf1c0 # v5.3.0
        with:
          context: ${{ github.workspace }}
          file: ${{ github.workspace }}/docker/admin.Dockerfile
          target: prod  # Use the production build stage
          build-args: |
            NEXT_PUBLIC_ENVIRONMENT=staging
            NEXT_PUBLIC_ENABLE_M3=1
            NEXT_PUBLIC_API_URL=https://api.staging.finspeed.online/api/v1
          push: true
          tags: |
            ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ADMIN_IMAGE_NAME }}/${{ env.ADMIN_IMAGE_NAME }}:${{ steps.image-metadata.outputs.image_tag }}
            ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ADMIN_IMAGE_NAME }}/${{ env.ADMIN_IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Prepare Migrate Dockerfile in context root
        if: needs.changes.outputs.api == 'true' || needs.changes.outputs.infra == 'true'
        run: |
          set -euo pipefail
          if [ ! -f docker/migrate.Dockerfile ]; then
            echo "ERROR: docker/migrate.Dockerfile not found in workspace." >&2
            echo "Docker dir listing:" >&2
            ls -la docker >&2 || true
            exit 1
          fi
          cp docker/migrate.Dockerfile ./migrate.Dockerfile
        working-directory: ${{ github.workspace }}

      - name: Build and Push Migrate Image
        if: needs.changes.outputs.api == 'true' || needs.changes.outputs.infra == 'true'
        uses: docker/build-push-action@2cdde995de11925a030ce8070c3d77a52ffcf1c0 # v5.3.0
        with:
          context: ${{ github.workspace }}  # Include the entire project
          file: ./migrate.Dockerfile
          push: true
          tags: |
            ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.MIGRATE_IMAGE_NAME }}/${{ env.MIGRATE_IMAGE_NAME }}:${{ steps.image-metadata.outputs.image_tag }}
            ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.MIGRATE_IMAGE_NAME }}/${{ env.MIGRATE_IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-services:
    name: Deploy Services
    if: github.event_name == 'push' && needs.build-and-push.outputs.image_tag != ''
    needs: [build-and-push, changes]
    runs-on: ubuntu-latest
    environment: staging
    concurrency:
      group: deploy-staging
      cancel-in-progress: false
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@b7593ed2efd1c1617e1b0254da33b86225adb2a5 # v2.1.12 # v2.1.2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER_STAGING }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_STAGING }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2 # v3.1.1
        with:
          terraform_wrapper: false

      - name: Cache Terraform plugins
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4 # v4.0.2
        with:
          path: ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}

      - name: Clean up stale Terraform lock (best-effort)
        shell: bash
        run: |
          set -euo pipefail
          OBJECT="gs://${{ env.TF_STATE_BUCKET }}/staging/default.tflock"
          if gsutil -q stat "$OBJECT"; then
            MTIME=$(gsutil stat "$OBJECT" | awk -F': +' '/Update time:/ {print $2}' | head -n1)
            if [ -n "${MTIME:-}" ]; then
              LOCK_TS=$(date -d "$MTIME" +%s || echo 0)
              NOW=$(date +%s)
              AGE=$((NOW - LOCK_TS))
            else
              AGE=999999
            fi
            if [ "$AGE" -gt 900 ]; then
              echo "Deleting stale Terraform lock ($AGE seconds old) at $OBJECT"
              gsutil rm "$OBJECT" || true
            else
              echo "Terraform lock exists but is recent ($AGE seconds); not deleting."
            fi
          else
            echo "No Terraform lock file present."
          fi

      - name: Terraform Init
        run: terraform init -reconfigure -backend-config="bucket=${{ env.TF_STATE_BUCKET }}"
        working-directory: ./infra/terraform/staging

      - name: Set image variables from existing deployments or new builds
        shell: bash
        env:
          IMAGE_TAG: ${{ needs.build-and-push.outputs.image_tag }}
        run: |
          set -euo pipefail
          cd infra/terraform/staging

          # Default to newly built image tag if available
          API_IMG_URL="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.API_IMAGE_NAME }}/${{ env.API_IMAGE_NAME }}:${IMAGE_TAG}"
          MIGRATE_IMG_URL="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.MIGRATE_IMAGE_NAME }}/${{ env.MIGRATE_IMAGE_NAME }}:${IMAGE_TAG}"
          FRONTEND_IMG_URL="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.FRONTEND_IMAGE_NAME }}/${{ env.FRONTEND_IMAGE_NAME }}:${IMAGE_TAG}"
          ADMIN_IMG_URL="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ADMIN_IMAGE_NAME }}/${{ env.ADMIN_IMAGE_NAME }}:${IMAGE_TAG}"

          # If no new API build, find the latest from Cloud Run
          if [ "${{ needs.changes.outputs.api }}" != "true" ]; then
            LATEST_API_IMG=$(gcloud run services describe finspeed-api-staging \
              --region=${{ env.GCP_REGION }} \
              --project=${{ env.GCP_PROJECT_ID }} \
              --format="value(spec.template.spec.containers[0].image)" 2>/dev/null || echo "")
            if [ -n "$LATEST_API_IMG" ]; then API_IMG_URL=$LATEST_API_IMG; fi
          fi

          # If no new frontend/infra build, get the latest from Cloud Run service
          if [ "${{ needs.changes.outputs.frontend }}" != "true" ] && [ "${{ needs.changes.outputs.infra }}" != "true" ]; then
            FRONTEND_IMG=$(gcloud run services describe finspeed-frontend-staging \
              --region=${{ env.GCP_REGION }} \
              --project=${{ env.GCP_PROJECT_ID }} \
              --format="value(spec.template.spec.containers[0].image)" 2>/dev/null || echo "")
            if [ -n "$FRONTEND_IMG" ]; then
              FRONTEND_IMG_URL="$FRONTEND_IMG"
            else
              FRONTEND_IMG_URL="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.FRONTEND_IMAGE_NAME }}/${{ env.FRONTEND_IMAGE_NAME }}:latest"
            fi
          fi

          # If no new admin/infra build, get the latest from Cloud Run service
          if [ "${{ needs.changes.outputs.admin }}" != "true" ] && [ "${{ needs.changes.outputs.infra }}" != "true" ]; then
            ADMIN_IMG=$(gcloud run services describe finspeed-admin-staging \
              --region=${{ env.GCP_REGION }} \
              --project=${{ env.GCP_PROJECT_ID }} \
              --format="value(spec.template.spec.containers[0].image)" 2>/dev/null || echo "")
            if [ -n "$ADMIN_IMG" ]; then
              ADMIN_IMG_URL="$ADMIN_IMG"
            else
              ADMIN_IMG_URL="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ADMIN_IMAGE_NAME }}/${{ env.ADMIN_IMAGE_NAME }}:latest"
            fi
          fi

          # If no new API/infra build (which implies migrate build), find latest from Cloud Run Job
          if [ "${{ needs.changes.outputs.api }}" != "true" ] && [ "${{ needs.changes.outputs.infra }}" != "true" ]; then
            LATEST_MIGRATE_IMG=$(gcloud run jobs describe finspeed-migrate-staging \
              --region=${{ env.GCP_REGION }} \
              --project=${{ env.GCP_PROJECT_ID }} \
              --format="value(spec.template.template.spec.containers[0].image)" 2>/dev/null || echo "")
            if [ -n "$LATEST_MIGRATE_IMG" ]; then MIGRATE_IMG_URL=$LATEST_MIGRATE_IMG; fi
          fi

          echo "Using API Image: $API_IMG_URL"
          echo "Using Frontend Image: $FRONTEND_IMG_URL"
          echo "Using Admin Image: $ADMIN_IMG_URL"
          echo "Using Migrate Image: $MIGRATE_IMG_URL"

          echo "TF_VAR_api_image=$API_IMG_URL" >> $GITHUB_ENV
          echo "TF_VAR_frontend_image=$FRONTEND_IMG_URL" >> $GITHUB_ENV
          echo "TF_VAR_admin_image=$ADMIN_IMG_URL" >> $GITHUB_ENV
          echo "TF_VAR_migrate_image=$MIGRATE_IMG_URL" >> $GITHUB_ENV

      - name: Terraform Apply (Services)
        run: |
          terraform apply -lock-timeout=5m -auto-approve -input=false \
            -target='module.finspeed_infra.google_cloud_run_v2_service.api[0]' \
            -target='module.finspeed_infra.google_cloud_run_v2_service.admin[0]' \
            -target='module.finspeed_infra.google_cloud_run_v2_job.migrate[0]'
        working-directory: ./infra/terraform/staging
        env:
          TF_VAR_cors_allowed_origins: '["https://staging.finspeed.online","https://admin.staging.finspeed.online"]'

      - name: Terraform Apply Service Images
        shell: bash
        run: |
          set -euo pipefail
          echo "Applying Terraform with:"
          echo "  api_image=${TF_VAR_api_image}"
          echo "  frontend_image=${TF_VAR_frontend_image}"
          echo "  admin_image=${TF_VAR_admin_image}"
          echo "  migrate_image=${TF_VAR_migrate_image}"
          terraform apply -lock-timeout=5m -input=false -auto-approve \
            -var=api_image="${TF_VAR_api_image}" \
            -var=frontend_image="${TF_VAR_frontend_image}" \
            -var=admin_image="${TF_VAR_admin_image}" \
            -var=migrate_image="${TF_VAR_migrate_image}"
        working-directory: ./infra/terraform/staging
        env:
          TF_VAR_cors_allowed_origins: '["https://staging.finspeed.online","https://admin.staging.finspeed.online"]'

      - name: Run database migrations job (with timeout and diagnostics)
        if: needs.changes.outputs.api == 'true' || needs.changes.outputs.infra == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.force_migrate == 'true')
        shell: bash
        run: |
          set -eo pipefail
          JOB="finspeed-migrate-staging"
          REGION="${{ env.GCP_REGION }}"
          PROJECT="${{ env.GCP_PROJECT_ID }}"
          echo "Executing Cloud Run job: ${JOB} (region=${REGION}, project=${PROJECT})"
          # Enforce a max wait to prevent indefinite hanging
          set +e
          timeout 12m gcloud run jobs execute "${JOB}" --region="${REGION}" --project="${PROJECT}" --wait
          STATUS=$?
          set -e
          echo "gcloud run jobs execute exit code: ${STATUS}"
          # Always gather diagnostics for the latest execution
          LATEST_EXEC=$(gcloud run jobs executions list --job="${JOB}" --region="${REGION}" --project="${PROJECT}" --sort-by="~createTime" --limit=1 --format="value(name)" || true)
          echo "Latest execution: ${LATEST_EXEC:-<none>}"
          if [ -n "${LATEST_EXEC:-}" ]; then
            echo "=== Execution describe ==="
            gcloud run jobs executions describe "${LATEST_EXEC}" --region="${REGION}" --project="${PROJECT}" || true
            echo "=== Tasks list ==="
            gcloud run jobs executions tasks list --job="${JOB}" --execution="${LATEST_EXEC}" --region="${REGION}" --project="${PROJECT}" || true
            echo "=== Recent logs (textPayload) ==="
            gcloud logging read 'resource.type="cloud_run_job" AND resource.labels.job_name="'${JOB}'" AND resource.labels.location="'${REGION}'"' --project="${PROJECT}" --limit=200 --format='value(textPayload)' || true
          fi
          if [ "${STATUS}" -ne 0 ]; then
            echo "Migration job failed or timed out."
            exit "${STATUS}"
          fi

  migrate-only:
    name: Run Migrations Only (manual)
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.force_migrate == 'true'
    runs-on: ubuntu-latest
    environment: staging
    concurrency:
      group: migrate-only-staging
      cancel-in-progress: true
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@b7593ed2efd1c1617e1b0254da33b86225adb2a5 # v2.1.12
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER_STAGING }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_STAGING }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Run database migrations job (manual, with timeout and diagnostics)
        shell: bash
        run: |
          set -eo pipefail
          JOB="finspeed-migrate-staging"
          REGION="${{ env.GCP_REGION }}"
          PROJECT="${{ env.GCP_PROJECT_ID }}"
          echo "Executing Cloud Run job: ${JOB} (region=${REGION}, project=${PROJECT})"
          set +e
          timeout 12m gcloud run jobs execute "${JOB}" --region="${REGION}" --project="${PROJECT}" --wait
          STATUS=$?
          set -e
          echo "gcloud run jobs execute exit code: ${STATUS}"
          LATEST_EXEC=$(gcloud run jobs executions list --job="${JOB}" --region="${REGION}" --project="${PROJECT}" --sort-by="~createTime" --limit=1 --format="value(name)" || true)
          echo "Latest execution: ${LATEST_EXEC:-<none>}"
          if [ -n "${LATEST_EXEC:-}" ]; then
            echo "=== Execution describe ==="
            gcloud run jobs executions describe "${LATEST_EXEC}" --region="${REGION}" --project="${PROJECT}" || true
            echo "=== Tasks list ==="
            gcloud run jobs executions tasks list --job="${JOB}" --execution="${LATEST_EXEC}" --region="${REGION}" --project="${PROJECT}" || true
            echo "=== Recent logs (textPayload) ==="
            gcloud logging read 'resource.type="cloud_run_job" AND resource.labels.job_name="'${JOB}'" AND resource.labels.location="'${REGION}'"' --project="${PROJECT}" --limit=200 --format='value(textPayload)' || true
          fi
          if [ "${STATUS}" -ne 0 ]; then
            echo "Migration job failed or timed out."
            exit "${STATUS}"
          fi