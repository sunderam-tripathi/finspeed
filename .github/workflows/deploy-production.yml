name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      confirm_deployment:
        description: 'Type "DEPLOY" to confirm production deployment'
        required: true
        default: ''

jobs:
  validate-deployment:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
    - name: Validate deployment confirmation
      run: |
        if [ "${{ github.event.inputs.confirm_deployment }}" != "DEPLOY" ]; then
          echo "Deployment not confirmed. Please type 'DEPLOY' to proceed."
          exit 1
        fi
        echo "Production deployment confirmed."

  security-scan:
    runs-on: ubuntu-latest
    needs: [validate-deployment]
    if: always() && (needs.validate-deployment.result == 'success' || github.event_name == 'push')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security scan
      run: |
        echo "Running security scans..."
        # Add security scanning tools here
        # Example: Snyk, OWASP dependency check, etc.
        echo "Security scan completed."

  comprehensive-tests:
    runs-on: ubuntu-latest
    needs: [security-scan]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: finspeed_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install pnpm
      run: npm install -g pnpm

    # Comprehensive API Tests
    - name: Install Go dependencies
      run: |
        cd api
        go mod download

    - name: Run database migrations for testing
      run: |
        cd api
        export DATABASE_URL="postgres://postgres:testpass@localhost:5432/finspeed_test?sslmode=disable"
        go run cmd/migrate/main.go up || echo "Migration tool not implemented yet"

    - name: Run comprehensive Go tests
      run: |
        cd api
        export DATABASE_URL="postgres://postgres:testpass@localhost:5432/finspeed_test?sslmode=disable"
        go test -v -race -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html

    - name: Upload test coverage
      uses: actions/upload-artifact@v3
      with:
        name: go-coverage
        path: api/coverage.html

    # Comprehensive Frontend Tests
    - name: Install frontend dependencies
      run: |
        cd frontend
        pnpm install

    - name: Run frontend tests with coverage
      run: |
        cd frontend
        pnpm run test:coverage || echo "Coverage tests not configured yet"

    - name: Run E2E tests
      run: |
        cd frontend
        pnpm run test:e2e || echo "E2E tests not configured yet"

    - name: Build production frontend
      run: |
        cd frontend
        pnpm run build

  deploy-production:
    needs: [comprehensive-tests]
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true

    - name: Configure Docker to use gcloud as a credential helper
      run: gcloud auth configure-docker

    - name: Build and push API Docker image
      run: |
        cd api
        docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/finspeed-api-prod:${{ github.sha }} .
        docker tag gcr.io/${{ secrets.GCP_PROJECT_ID }}/finspeed-api-prod:${{ github.sha }} gcr.io/${{ secrets.GCP_PROJECT_ID }}/finspeed-api-prod:latest
        docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/finspeed-api-prod:${{ github.sha }}
        docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/finspeed-api-prod:latest

    - name: Build and push Frontend Docker image
      run: |
        cd frontend
        docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/finspeed-frontend-prod:${{ github.sha }} .
        docker tag gcr.io/${{ secrets.GCP_PROJECT_ID }}/finspeed-frontend-prod:${{ github.sha }} gcr.io/${{ secrets.GCP_PROJECT_ID }}/finspeed-frontend-prod:latest
        docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/finspeed-frontend-prod:${{ github.sha }}
        docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/finspeed-frontend-prod:latest

    - name: Deploy to Cloud Run (API)
      run: |
        gcloud run deploy finspeed-api-prod \
          --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/finspeed-api-prod:${{ github.sha }} \
          --platform managed \
          --region us-central1 \
          --allow-unauthenticated \
          --min-instances 1 \
          --max-instances 10 \
          --cpu 1 \
          --memory 512Mi \
          --set-env-vars="ENVIRONMENT=production" \
          --set-env-vars="DATABASE_URL=${{ secrets.PROD_DATABASE_URL }}" \
          --set-env-vars="LOG_LEVEL=info"

    - name: Deploy to Cloud Run (Frontend)
      run: |
        gcloud run deploy finspeed-frontend-prod \
          --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/finspeed-frontend-prod:${{ github.sha }} \
          --platform managed \
          --region us-central1 \
          --allow-unauthenticated \
          --min-instances 1 \
          --max-instances 5 \
          --cpu 1 \
          --memory 512Mi \
          --set-env-vars="ENVIRONMENT=production" \
          --set-env-vars="API_URL=${{ secrets.PROD_API_URL }}"

    - name: Run production smoke tests
      run: |
        echo "Running production smoke tests..."
        sleep 30  # Wait for services to be ready
        
        # Test API health
        curl -f ${{ secrets.PROD_API_URL }}/healthz || exit 1
        curl -f ${{ secrets.PROD_API_URL }}/readyz || exit 1
        
        # Test frontend
        curl -f ${{ secrets.PROD_FRONTEND_URL }} || exit 1
        
        echo "Production deployment successful!"

    - name: Notify deployment success
      run: |
        echo "ðŸš€ Production deployment completed successfully!"
        echo "API: ${{ secrets.PROD_API_URL }}"
        echo "Frontend: ${{ secrets.PROD_FRONTEND_URL }}"
        echo "Commit: ${{ github.sha }}"
        # Add Slack/email notifications here if needed

  rollback-on-failure:
    needs: [deploy-production]
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
    - name: Rollback deployment
      run: |
        echo "Deployment failed. Initiating rollback..."
        # Add rollback logic here
        # This could involve deploying the previous known good version
        echo "Rollback completed. Please check the services manually."