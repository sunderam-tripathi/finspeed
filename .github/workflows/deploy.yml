name: Deploy to GCP

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  PROJECT_ID_STAGING: finspeed-staging
  PROJECT_ID_PROD: finspeed-prod
  REGION: us-central1

jobs:
  deploy-staging:
    if: github.ref == 'refs/heads/develop' || github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    environment: staging
    
    permissions:
      contents: read
      id-token: write  # Required for OIDC token generation
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER_STAGING }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT_STAGING }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID_STAGING }}
      
      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev
      
      - name: Deploy Infrastructure
        working-directory: ./infra
        run: |
          # Install Terraform
          wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update && sudo apt install terraform
          
          # Deploy with Terraform
          cd terraform
          terraform init
          
          # Import existing resources to resolve 409 conflicts
          echo "üì• Importing existing resources to resolve conflicts..."
          set +e  # Continue on import errors
          
          PROJECT_ID="finspeed-staging"
          PROJECT_NUMBER="568982729363"
          
          # Import existing resources that cause 409 conflicts
          terraform import -var-file="environments/staging.tfvars" google_storage_bucket.terraform_state "finspeed-terraform-state-staging" 2>/dev/null || echo "‚ö†Ô∏è Bucket already imported or doesn't exist"
          terraform import -var-file="environments/staging.tfvars" google_compute_network.vpc_network "projects/$PROJECT_ID/global/networks/finspeed-vpc-staging" 2>/dev/null || echo "‚ö†Ô∏è VPC already imported or doesn't exist"
          terraform import -var-file="environments/staging.tfvars" google_secret_manager_secret.database_password "projects/$PROJECT_NUMBER/secrets/finspeed-database-password-staging" 2>/dev/null || echo "‚ö†Ô∏è DB password secret already imported or doesn't exist"
          terraform import -var-file="environments/staging.tfvars" google_secret_manager_secret.database_url "projects/$PROJECT_NUMBER/secrets/finspeed-database-url-staging" 2>/dev/null || echo "‚ö†Ô∏è DB URL secret already imported or doesn't exist"
          terraform import -var-file="environments/staging.tfvars" google_iam_workload_identity_pool.github_pool "projects/$PROJECT_NUMBER/locations/global/workloadIdentityPools/github-actions-pool" 2>/dev/null || echo "‚ö†Ô∏è Workload Identity Pool already imported or doesn't exist"
          terraform import -var-file="environments/staging.tfvars" google_iam_workload_identity_pool_provider.github_provider "projects/$PROJECT_NUMBER/locations/global/workloadIdentityPools/github-actions-pool/providers/github-provider" 2>/dev/null || echo "‚ö†Ô∏è WIF Provider already imported or doesn't exist"
          terraform import -var-file="environments/staging.tfvars" google_service_account.github_actions "projects/$PROJECT_ID/serviceAccounts/github-actions-staging@$PROJECT_ID.iam.gserviceaccount.com" 2>/dev/null || echo "‚ö†Ô∏è GitHub Actions SA already imported or doesn't exist"
          terraform import -var-file="environments/staging.tfvars" google_service_account.cloud_run_sa "projects/$PROJECT_ID/serviceAccounts/finspeed-cloud-run-staging@$PROJECT_ID.iam.gserviceaccount.com" 2>/dev/null || echo "‚ö†Ô∏è Cloud Run SA already imported or doesn't exist"
          terraform import -var-file="environments/staging.tfvars" google_sql_database_instance.postgres "$PROJECT_ID:finspeed-postgres-staging" 2>/dev/null || echo "‚ö†Ô∏è Cloud SQL already imported or doesn't exist"
          
          set -e  # Re-enable exit on error
          
          echo "‚úÖ Import process completed, proceeding with deployment..."
          terraform plan -var-file="environments/staging.tfvars" -out=staging.tfplan
          terraform apply -auto-approve staging.tfplan
      
      - name: Build and Deploy Applications
        run: |
          echo "üöÄ Building and deploying applications to staging..."
          
          # Set up environment variables
          export IMAGE_TAG=$GITHUB_SHA
          export API_IMAGE="$REGION-docker.pkg.dev/$PROJECT_ID_STAGING/finspeed/api:$IMAGE_TAG"
          export FRONTEND_IMAGE="$REGION-docker.pkg.dev/$PROJECT_ID_STAGING/finspeed/frontend:$IMAGE_TAG"
          
          # Create Artifact Registry repository if it doesn't exist
          gcloud artifacts repositories create finspeed \
            --repository-format=docker \
            --location=$REGION \
            --description="Finspeed application images" || echo "Repository already exists"
          
          # Build API container
          echo "üì¶ Building API container..."
          docker build -t $API_IMAGE ./api
          docker push $API_IMAGE
          
          # Build Frontend container
          echo "üì¶ Building Frontend container..."
          docker build -t $FRONTEND_IMAGE ./frontend
          docker push $FRONTEND_IMAGE
          
          # Run database migrations
          echo "üóÑÔ∏è Running database migrations..."
          gcloud run jobs create finspeed-migrate-staging \
            --image=$API_IMAGE \
            --region=$REGION \
            --set-env-vars="DATABASE_URL=postgresql://finspeed:$(gcloud secrets versions access latest --secret=finspeed-database-password-staging)@$(gcloud sql instances describe finspeed-postgres-staging --format='value(ipAddresses[0].ipAddress)'):5432/finspeed_staging?sslmode=require" \
            --set-env-vars="MIGRATIONS_PATH=file://./db/migrations" \
            --command="/bin/sh" \
            --args="-c,./main migrate up" \
            --max-retries=3 \
            --parallelism=1 \
            --task-count=1 || echo "Migration job already exists"
          
          gcloud run jobs execute finspeed-migrate-staging --region=$REGION --wait
          
          # Deploy API to Cloud Run
          echo "üöÄ Deploying API to Cloud Run..."
          gcloud run deploy finspeed-api-staging \
            --image=$API_IMAGE \
            --region=$REGION \
            --platform=managed \
            --allow-unauthenticated \
            --port=8080 \
            --memory=512Mi \
            --cpu=1 \
            --min-instances=0 \
            --max-instances=10 \
            --set-env-vars="DATABASE_URL=postgresql://finspeed:$(gcloud secrets versions access latest --secret=finspeed-database-password-staging)@$(gcloud sql instances describe finspeed-postgres-staging --format='value(ipAddresses[0].ipAddress)'):5432/finspeed_staging?sslmode=require" \
            --set-env-vars="JWT_SECRET=$(gcloud secrets versions access latest --secret=finspeed-jwt-secret-staging)" \
            --set-env-vars="PORT=8080" \
            --set-env-vars="GIN_MODE=release"
          
          # Get API URL
          export API_URL=$(gcloud run services describe finspeed-api-staging --region=$REGION --format='value(status.url)')
          
          # Deploy Frontend to Cloud Run
          echo "üöÄ Deploying Frontend to Cloud Run..."
          gcloud run deploy finspeed-frontend-staging \
            --image=$FRONTEND_IMAGE \
            --region=$REGION \
            --platform=managed \
            --allow-unauthenticated \
            --port=3000 \
            --memory=512Mi \
            --cpu=1 \
            --min-instances=0 \
            --max-instances=10 \
            --set-env-vars="NEXT_PUBLIC_API_URL=$API_URL" \
            --set-env-vars="NODE_ENV=production"
          
          # Get Frontend URL
          export FRONTEND_URL=$(gcloud run services describe finspeed-frontend-staging --region=$REGION --format='value(status.url)')
          
          echo "‚úÖ Deployment completed successfully!"
          echo "üåê Frontend URL: $FRONTEND_URL"
          echo "üîó API URL: $API_URL"
          
      - name: Run Smoke Tests
        run: |
          echo "üß™ Running smoke tests..."
          
          # Get service URLs
          export API_URL=$(gcloud run services describe finspeed-api-staging --region=$REGION --format='value(status.url)')
          export FRONTEND_URL=$(gcloud run services describe finspeed-frontend-staging --region=$REGION --format='value(status.url)')
          
          # Test API health endpoint
          echo "Testing API health..."
          curl -f "$API_URL/healthz" || (echo "‚ùå API health check failed" && exit 1)
          
          # Test API products endpoint
          echo "Testing API products endpoint..."
          curl -f "$API_URL/api/v1/products" || (echo "‚ùå API products endpoint failed" && exit 1)
          
          # Test API categories endpoint
          echo "Testing API categories endpoint..."
          curl -f "$API_URL/api/v1/categories" || (echo "‚ùå API categories endpoint failed" && exit 1)
          
          # Test Frontend homepage
          echo "Testing Frontend homepage..."
          curl -f "$FRONTEND_URL" || (echo "‚ùå Frontend homepage failed" && exit 1)
          
          echo "‚úÖ All smoke tests passed!"
          echo "üéâ Staging deployment is healthy and ready!"

  deploy-production:
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    runs-on: ubuntu-latest
    environment: production
    needs: [deploy-staging]  # Only deploy to prod after staging succeeds
    
    permissions:
      contents: read
      id-token: write  # Required for OIDC token generation
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER_PROD }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT_PROD }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID_PROD }}
      
      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev
      
      - name: Deploy Infrastructure
        working-directory: ./infra
        run: |
          # Install Terraform
          wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update && sudo apt install terraform
          
          # Deploy with Terraform
          cd terraform
          terraform init
          terraform plan -var-file="environments/production.tfvars" -out=production.tfplan
          terraform apply -auto-approve production.tfplan
      
      - name: Build and Deploy Applications
        run: |
          echo "üöÄ Building and deploying applications to production..."
          # Add your application build and deployment steps here
          # Example:
          # docker build -t $REGION-docker.pkg.dev/$PROJECT_ID_PROD/finspeed/api:$GITHUB_SHA ./api
          # docker push $REGION-docker.pkg.dev/$PROJECT_ID_PROD/finspeed/api:$GITHUB_SHA
          # gcloud run deploy finspeed-api-production --image=$REGION-docker.pkg.dev/$PROJECT_ID_PROD/finspeed/api:$GITHUB_SHA

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run tests
        run: |
          echo "üß™ Running tests..."
          # Add your test commands here
          # Example:
          # npm test
          # python -m pytest
          # go test ./...
