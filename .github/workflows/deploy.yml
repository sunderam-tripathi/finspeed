name: Deploy to GCP

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  PROJECT_ID_STAGING: finspeed-staging
  PROJECT_ID_PROD: finspeed-prod
  REGION: us-central1

jobs:
  deploy-staging:
    if: github.ref == 'refs/heads/develop' || github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    environment: staging
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER_STAGING }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT_STAGING }}
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID_STAGING }}
      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev
      - name: Build and Deploy Applications
        run: |
          echo "üöÄ Building and deploying applications to staging..."
          export IMAGE_TAG=$GITHUB_SHA
          export API_IMAGE="$REGION-docker.pkg.dev/$PROJECT_ID_STAGING/finspeed/api:$IMAGE_TAG"
          export FRONTEND_IMAGE="$REGION-docker.pkg.dev/$PROJECT_ID_STAGING/finspeed/frontend:$IMAGE_TAG"
          gcloud artifacts repositories create finspeed --repository-format=docker --location=$REGION --description="Finspeed application images" || echo "Repository already exists"
          echo "üì¶ Building API container..."
          docker build -t $API_IMAGE -f ./api/Dockerfile .
          docker push $API_IMAGE
          echo "üì¶ Building Frontend container..."
          docker build -t $FRONTEND_IMAGE -f ./frontend/Dockerfile .
          docker push $FRONTEND_IMAGE
          echo "üóÑÔ∏è Running database migrations..."
          gcloud run jobs update finspeed-migrate-staging --image=$API_IMAGE --region=$REGION
          gcloud run jobs execute finspeed-migrate-staging --region=$REGION --wait
          echo "üöÄ Deploying API to Cloud Run..."
          gcloud run deploy finspeed-api-staging \
            --image=$API_IMAGE \
            --region=$REGION \
            --platform=managed \
            --allow-unauthenticated \
            --port=8080 \
            --memory=512Mi \
            --cpu=1 \
            --min-instances=0 \
            --max-instances=2 \
            --set-secrets=DATABASE_URL=finspeed-database-url-staging:latest,JWT_SECRET=finspeed-jwt-secret-staging:latest \
            --set-env-vars=GIN_MODE=release,ENVIRONMENT=staging,LOG_LEVEL=info
          echo "üöÄ Deploying Frontend to Cloud Run..."
          gcloud run deploy finspeed-frontend-staging \
            --image=$FRONTEND_IMAGE \
            --region=$REGION \
            --platform=managed \
            --allow-unauthenticated \
            --port=3000 \
            --memory=512Mi \
            --cpu=1 \
            --min-instances=0 \
            --max-instances=10 \
            --set-env-vars="NEXT_PUBLIC_API_URL=https://api.finspeed.online" \
            --set-env-vars="NODE_ENV=production"
          echo "‚úÖ Deployment completed successfully!"
          echo "üåê Frontend URL: https://finspeed.online"
          echo "üîó API URL: https://api.finspeed.online"
      - name: Run Smoke Tests
        run: |
          echo "üß™ Running smoke tests..."
          export API_URL="https://api.finspeed.online"
          export FRONTEND_URL="https://finspeed.online"
          echo "Polling /healthz endpoint..."
          ATTEMPTS=0
          MAX_ATTEMPTS=12
          SUCCESS=false
          until [ $ATTEMPTS -ge $MAX_ATTEMPTS ]; do
            if curl --fail --silent --show-error --retry 5 --retry-delay 10 --retry-connrefused "$API_URL/healthz"; then
              echo "‚úÖ API /healthz endpoint is healthy."
              SUCCESS=true
              break
            fi
            ATTEMPTS=$((ATTEMPTS + 1))
            echo "Attempt $ATTEMPTS/$MAX_ATTEMPTS failed. Retrying in 10 seconds..."
            sleep 10
          done
          if [ "$SUCCESS" = false ]; then
            echo "‚ùå API /healthz endpoint did not become healthy in time."
            exit 1
          fi
          echo "Testing API products endpoint..."
          curl -f "$API_URL/api/v1/products" || (echo "‚ùå API products endpoint failed" && exit 1)
          echo "Testing API categories endpoint..."
          curl -f "$API_URL/api/v1/categories" || (echo "‚ùå API categories endpoint failed" && exit 1)
          echo "Testing Frontend homepage..."
          curl -f "$FRONTEND_URL" || (echo "‚ùå Frontend homepage failed" && exit 1)
          echo "‚úÖ All smoke tests passed!"
          echo "üéâ Staging deployment is healthy and ready!"

  deploy-production:
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    runs-on: ubuntu-latest
    environment: production
    needs: [deploy-staging]  # Only deploy to prod after staging succeeds
    
    permissions:
      contents: read
      id-token: write  # Required for OIDC token generation
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER_PROD }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT_PROD }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID_PROD }}
      
      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev
      
      - name: Deploy Infrastructure
        working-directory: ./infra
        run: |
          # Install Terraform
          wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update && sudo apt install terraform
          
          # Deploy with Terraform
          cd terraform
          terraform init
          terraform plan -var-file="environments/production.tfvars" -out=production.tfplan
          terraform apply -auto-approve production.tfplan
      
      - name: Build and Deploy Applications
        run: |
          echo "üöÄ Building and deploying applications to production..."
          # Add your application build and deployment steps here
          # Example:
          # docker build -t $REGION-docker.pkg.dev/$PROJECT_ID_PROD/finspeed/api:$GITHUB_SHA ./api
          # docker push $REGION-docker.pkg.dev/$PROJECT_ID_PROD/finspeed/api:$GITHUB_SHA
          # gcloud run deploy finspeed-api-production --image=$REGION-docker.pkg.dev/$PROJECT_ID_PROD/finspeed/api:$GITHUB_SHA

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run tests
        run: |
          echo "üß™ Running tests..."
          # Add your test commands here
          # Example:
          # npm test
          # python -m pytest
          # go test ./...
